@import 'variables';

// Media Queries
/*
  0-600px: Phone
  600-900px: Tablet Portrait
  900-1200px: Tablet Landscape
  [1200-1800px] default styles
  1800px+: Big Desktops
*/


/*
xs
sm
md
lg
xl
 */
@mixin respond($breakpoint) {
/*  @if $breakpoint == xs {
    @media (max-width: 600px) {
      @content
    }
  }
  @if $breakpoint == sm {
    @media (max-width: 960px) {
      @content
    }
  }
  @if $breakpoint == md {
    @media (max-width: 1280px) {
      @content
    }
  }
  @if $breakpoint == lg {
    @media (max-width: 1920px) {
      @content
    }
  }
  @if $breakpoint == xl {
    @media (min-width: 1921px) {
      @content
    }
  }*/
  @if ($breakpoint == xxl) {
    @media (min-width: 1921px) {
        @content
      }
  }
  @else if ($breakpoint == xl) {
    @media (max-width: 1920px) {
        @content
      }
  }
  @else if ($breakpoint == lg) {
    @media (max-width: 1280px) {
        @content
      }
  }
  @else if ($breakpoint == md) {
    @media (max-width: 960px) {
        @content
      }
  }
  @else if ($breakpoint == sm) {
    @media (max-width: 600px) {
        @content
      }
  }
  @else if ($breakpoint == xs) {
    @media (max-width: 400px) {
        @content
      }
  }
}

// Mixins
@mixin style-header-text($color) {
  padding: 0;
  opacity: 0;
  display: flex;
  flex-direction: row;
  justify-content: center;
  text-align: center;
  color: $color;
}

@mixin orange-opacity-gradient($opacity) {
  background-image: linear-gradient(to bottom right, rgba($lightOrange, $opacity), rgba($mediumOrange, $opacity), rgba($darkOrange, $opacity));
}

@mixin green-opacity-gradient($opacity) {
  background-image: linear-gradient(to bottom right, rgba($lightGreen, $opacity), rgba($mediumGreen, $opacity), rgba($darkGreen, $opacity));
}

@mixin blue-opacity-gradient($opacity) {
  background-image: linear-gradient(to bottom right, rgba($lightBlue, $opacity), rgba($mediumBlue, $opacity), rgba($darkBlue, $opacity));
}

@mixin animate($animation) {
  -webkit-animation: $animation;
  -o-animation: $animation;
  animation: $animation;
}

@mixin transition($transition) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -ms-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

@mixin transform($transformation) {
  -webkit-transform: $transformation;
  -moz-transform: $transformation;
  -ms-transform: $transformation;
  -o-transform: $transformation;
  transform: $transformation;
}

@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin;
  -o-transform-origin: $origin;
  transform-origin: $origin;
}

@mixin perspective($perspective) {
  -webkit-perspective: $perspective;
  -moz-perspective: $perspective;
  perspective: $perspective;
}

@mixin hide-backface {
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  backface-visibility: hidden;
}

@mixin flex-basis($basis) {
  -webkit-flex-basis: $basis;
  -moz-flex-basis: $basis;
  -o-flex-basis: $basis;
  -ms-flex-basis: $basis;
  flex-basis: $basis;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

@mixin box-sizing($sizing) {
  -webkit-box-sizing: $sizing;
  -moz-box-sizing: $sizing;
  box-sizing: $sizing;
}

@mixin box-decoration-break($breakType) {
  -webkit-box-decoration-break: $breakType;
  -o-box-decoration-break: $breakType;
  -ms-box-decoration-break: $breakType;
  box-decoration-break: $breakType;
}

@mixin box-shadow($box-shadow) {
  -webkit-box-shadow: $box-shadow;
  -moz-box-shadow: $box-shadow;
  box-shadow: $box-shadow;
}

@mixin smooth-corners {
  @include border-radius($BORDER_RADIUS);
}

@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  @include translate-center;
}

@mixin absolute-origin {
  position: absolute;
  top: 0;
  left: 0;
}

@mixin sticky {
  position: -webkit-sticky;
  position: sticky;
}

@mixin column-count($count) {
  -webkit-column-count: $count;
  -moz-column-count: $count;
  -ms-column-count: $count;
  -o-column-count: $count;
  column-count: $count;
}

@mixin column-gap($gap) {
  -webkit-column-gap: $gap;
  -moz-column-gap: $gap;
  -ms-column-gap: $gap;
  -o-column-count: $gap;
  column-gap: $gap;
}

@mixin hyphens($hyphens) {
  -webkit-hyphens: $hyphens;
  -moz-hyphens: $hyphens;
  -ms-hyphens: $hyphens;
  hyphens: $hyphens;
}

@mixin translate-center {
  @include transform(translate(-50%, -50%));
}

@mixin focus-outline($secondaryShadow: 0 0 0 #eeeeee) {
  @include box-shadow((0 0 1rem $darkBlue, $secondaryShadow));
}

@mixin background-clip($clipType) {
  -webkit-background-clip: $clipType;
  background-clip: $clipType;
}

@mixin shape-outside($shape) {
  -webkit-shape-outside: $shape;
  -moz-shape-outside: $shape;
  -o-shape-outside: $shape;
  -ms-shape-outside: $shape;
  shape-outside: $shape;
}

@mixin clip-path($shape) {
  -webkit-clip-path: $shape;
  -moz-clip-path: $shape;
  -o-clip-path: $shape;
  -ms-clip-path: $shape;
  clip-path: $shape;
}

@mixin background-size($size) {
  -webkit-background-size: $size;
  background-size: $size;
}

@mixin respond-to($media) {
  @if $media == handhelds {
    @media only screen and (max-width: $break-small) {
      @content;
    }
  } @else if $media == medium-screens {
    @media only screen and (min-width: $break-small + 1) and (max-width: $break-large - 1) {
      @content;
    }
  } @else if $media == wide-screens {
    @media only screen and (min-width: $break-large) {
      @content;
    }
  }
}

@mixin skew-on-hover {
  @include transform(skewY(0.01turn) skewX(-0.02turn) scale(1.2) translateY(-2px));
}

@mixin grow-on-hover {
  @include transform(scale(1.2) translateY(-2px));
}

@mixin section {
  margin: 1rem;
}

@mixin relative-icon($left, $top) {
  display: inline-block;
  content: '';
  position: absolute;
  top: $top;
  left: $left;
}